#!/usr/bin/env node

import { Command } from 'commander'
import chalk from 'chalk'
import * as path from 'path';
import * as fs from 'fs-extra'
import { LocalizationTranslator } from './translators/localizationTranslator'
import { TranslationOptions } from './types/localization'

const program = new Command();

program
  .name('xml-localization-translator')
  .description('Sistema para traduzir arquivos XML de localiza√ß√£o do ingl√™s para portugu√™s')
  .version('1.0.0');

program
  .command('translate')
  .description('Traduz um arquivo XML de localiza√ß√£o')
  .argument('<input-file>', 'Arquivo XML de entrada')
  .option('-o, --output <output-file>', 'Arquivo de sa√≠da (opcional)')
  .option('-s, --source <source-language>', 'Idioma de origem', 'en')
  .option('-t, --target <target-language>', 'Idioma de destino', 'pt')
  .option('--api-key <api-key>', 'Chave da API de tradu√ß√£o (opcional)')
  .action(async (inputFile: string, options: any) => {
    try {
      console.log(chalk.blue('üöÄ Iniciando tradu√ß√£o de arquivo XML de localiza√ß√£o...\n'));
      
    
      if (!await fs.pathExists(inputFile)) {
        console.error(chalk.red(`‚ùå Arquivo n√£o encontrado: ${inputFile}`));
        process.exit(1);
      }
      
      
      const translatorOptions: TranslationOptions = {
        sourceLanguage: options.source,
        targetLanguage: options.target,
        apiKey: options.apiKey
      };
      
      const translator = new LocalizationTranslator(translatorOptions);
      
     
      console.log(chalk.yellow('üîç Validando arquivo XML...'));
      const isValid = await translator.validateFile(inputFile);
      
      if (!isValid) {
        console.error(chalk.red('‚ùå Arquivo XML inv√°lido ou n√£o √© um arquivo de localiza√ß√£o'));
        process.exit(1);
      }
      
      console.log(chalk.green('‚úÖ Arquivo XML v√°lido'));
      
      
      const stats = await translator.getFileStats(inputFile);
      console.log(chalk.cyan(`üìä Estat√≠sticas do arquivo:`));
      console.log(chalk.cyan(`   - Cultura: ${stats.culture}`));
      console.log(chalk.cyan(`   - Module ID: ${stats.moduleId}`));
      console.log(chalk.cyan(`   - Total de grupos: ${stats.totalGroups}`));
      console.log(chalk.cyan(`   - Total de strings: ${stats.totalStrings}\n`));
      
      
      console.log(chalk.yellow('üåê Testando servi√ßo de tradu√ß√£o...'));
      const isServiceWorking = await translator.testTranslationService();
      
      if (!isServiceWorking) {
        console.warn(chalk.yellow('‚ö†Ô∏è  Servi√ßo de tradu√ß√£o pode n√£o estar funcionando corretamente'));
        console.warn(chalk.yellow('   Continuando mesmo assim...\n'));
      } else {
        console.log(chalk.green('‚úÖ Servi√ßo de tradu√ß√£o funcionando\n'));
      }
      // Executa a tradu√ß√£o
      const outputFile = await translator.translateFile(
        inputFile,
        options.output,
        options.source,
        options.target
      );
      
      console.log(chalk.green(`\nüéâ Tradu√ß√£o conclu√≠da!`));
      console.log(chalk.green(`üìÅ Arquivo traduzido salvo em: ${outputFile}`));
      
    } catch (error) {
      console.error(chalk.red(`‚ùå Erro durante a tradu√ß√£o: ${error instanceof Error ? error.message : String(error)}`));
      process.exit(1);
    }
  });

program
  .command('validate')
  .description('Valida um arquivo XML de localiza√ß√£o')
  .argument('<input-file>', 'Arquivo XML para validar')
  .action(async (inputFile: string) => {
    try {
      console.log(chalk.blue('üîç Validando arquivo XML de localiza√ß√£o...\n'));
      
      if (!await fs.pathExists(inputFile)) {
        console.error(chalk.red(`‚ùå Arquivo n√£o encontrado: ${inputFile}`));
        process.exit(1);
      }
      
      const translator = new LocalizationTranslator();
      const isValid = await translator.validateFile(inputFile);
      
      if (isValid) {
        console.log(chalk.green('‚úÖ Arquivo XML v√°lido'));
        
        const stats = await translator.getFileStats(inputFile);
        console.log(chalk.cyan(`üìä Estat√≠sticas:`));
        console.log(chalk.cyan(`   - Cultura: ${stats.culture}`));
        console.log(chalk.cyan(`   - Module ID: ${stats.moduleId}`));
        console.log(chalk.cyan(`   - Total de grupos: ${stats.totalGroups}`));
        console.log(chalk.cyan(`   - Total de strings: ${stats.totalStrings}`));
      } else {
        console.error(chalk.red('‚ùå Arquivo XML inv√°lido ou n√£o √© um arquivo de localiza√ß√£o'));
        process.exit(1);
      }
      
    } catch (error) {
      console.error(chalk.red(`‚ùå Erro durante a valida√ß√£o: ${error instanceof Error ? error.message : String(error)}`));
      process.exit(1);
    }
  });

program
  .command('test')
  .description('Testa o servi√ßo de tradu√ß√£o')
  .action(async () => {
    try {
      console.log(chalk.blue('üåê Testando servi√ßo de tradu√ß√£o...\n'));
      
      const translator = new LocalizationTranslator();
      const isWorking = await translator.testTranslationService();
      
      if (isWorking) {
        console.log(chalk.green('‚úÖ Servi√ßo de tradu√ß√£o funcionando corretamente'));
      } else {
        console.error(chalk.red('‚ùå Servi√ßo de tradu√ß√£o n√£o est√° funcionando'));
        console.log(chalk.yellow('üí° Verifique sua conex√£o com a internet'));
        process.exit(1);
      }
      
    } catch (error) {
      console.error(chalk.red(`‚ùå Erro durante o teste: ${error instanceof Error ? error.message : String(error)}`));
      process.exit(1);
    }
  });


process.on('unhandledRejection', (reason, promise) => {
  console.error(chalk.red('‚ùå Erro n√£o tratado:'), reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error(chalk.red('‚ùå Exce√ß√£o n√£o capturada:'), error);
  process.exit(1);
});


program.parse(); 